როგორც ვიით C ში სტრინგები არ არის მასივის სახით ანუ თU გვინდა რამდენიმე სიმბოლოს მქონე
სიყვის დაწერა უნდა შევქმნათ ჩარების მასივი და მას მივანიჭოთ ამ სიტყვის მნიშვნელობა
როგორც ჩარების მასივებს ანუ სტრინგებს ასევე ნებისმიერ მასივებს C ში აქვთ გარკვეული თვისებები
მასივი არის იგივე მიმთითებელი და იგი მიუთითებს მის პირველ ელემენტზე, ანუ მასივი შეიცავს მისამართს
მასივს აქვს ის მისამართი რა მნიშვნელობაც ხოლო ჩვეულებრივ პოინტერს მნიშვნელობისგან განსხვავებული მისამართი

არგუმენტებიანი  მეინი ეს გამოიყენება იმისთვის რომ ყოველ ჯერზე არ მოგვიხდეს პროგრამის ახლიდან დაკომპილირება

აქვს argc და *argv[] არგუმენტები პროგრამის გაშვების დროს დამატებით შეგვიძლია მივაწოდოთ ინფორმაცია პროგრამას მაგალითად გადავცეთ რაიმე სტრინგი გადაცემული სტრინგების რაოდენობა იწერება argc ცვლადში ხოლო მნიშვნელობები *argv[] მისამართზე, რაოდენობა განისაზღვრება გამოტოვებით ანუ გაშვების დროს პროგრამის დასახელების შემდეგ ვწერთ სტრინგს გამოტოვებას სტრინგს გამოტოვებას და ა.შ გამოტოვება არის რაოდენობის განმსაზღვრელი, სტრინგ მასივში გადაცემული მნიშვნელობების ათვლა იწყება 1 დან ანუ მასივის მეორე ელემენტიდან, პირველში ანუ argv[0]ში ყოველთვის იწერება არსებული ფაილის სახელი ხოლო ყოველი შემდეგი ელემეტი შესაბამის მისამართს მიიღებს თანმიმდევრობით.

scanf() ფუნქცია იღებს იმ მნიშვნელობას თუ რამდენი ინფორმაციის წაკითხვა მოახერხა მან რამდენი არგუმენტის, scanf("%i %s",&i,str) ამ დროს თუ კოდი სწორად გვაქვს სკანეფის მნიშვნელობა იქნება ორი

სტანდარტ ინფუთ აუთფუთი რა არის ეს სტანდარტულად scanf და printf ინფორმაციის შემოტანა კოდში და ინფორმაციის გამოტანა კოდიდან ტერმინალიდან საშუალება გვაქვს რომ არათუ ხელით ავკრიფოთ ინფორმაცია თუ რისი შეტანაც გვსურს არამედ მივუთითოთ რაიმე ფაილი და მასში არსებულ იფორმაციას თავად გადაიტანს კოდში ასევე გამოტანისას არ დაბეჭდავს კომანდლაინში და გადაიტანს ოუთფუთს რაიმე ფაილში ამ ყველაფერს აკეთებს: ./program  < list.txt > rec.txt
რა ხდება ამ დროს, პროგრამაში სახელად program თუ გვაქვს scanf ფუნქცია გაშვების დროს აღარ მოგვთხოვს პროგრამა რომ შევიყვანოთ კლავიატურიდან ინფორმაცია არამედ თავად შეიყვანს იმ ინფორმაციას რაც ამაცე დირექტორიაში იქნება list.txt ფაილში, და თუ იქნება ამავე პროგრამაში printf ფუნქცია კომანდლაინზე არ დაბწჭდავს შედეგს და ჩაწერს (თუ არაა შექმნის ფაილს) rec.txt ფაილში. ეს ხდება მიმდინარე დირექტორიაში თუ ფაილი წასაკითხი ფაილი სხვა დირექტორიაშია სჭირდება მისამართის მითითება ისევე როგორც ჩასაწერ ფაილს იმ მისამართის მითითება თუ სად მოხდეს მისი შექმნა.

სტანდარტინფუთაუთფუთი, ჩვენ გვაქვს შესაძლებლობა ერთი პროგრამის აუთფუთI მივაბათ მეორე პროგრამის აუთფუთს ანუ საჭIროა მინიმუმ ორი პროგრამა რომელთაც მინიმუმ ერთს უნდა ჰქონდეს ოუთფუთI და მეორეს უნფუთი, ასეთ დროს პროგრამას რომელსაც აქვს აუთფუთი printf მაშში არსებულ ინფორმაციას არ დაბეჭდავს ფრომფთში და მას გადაიტანს მეორე პროგრამაში ამისათვის საჭIროა კომანდლაინიდან ბრძანება: ./program1 | ./program2 ანუ ამ დროს გაეშვება პირველი პროგრამა როცა დაასრულებს მასში არსებული პრინტეფიდან წაიღებს ინდორმაციას და გადაიტანს program2-ის სკანეფში

malloc(sizeof(variable)), free(variable); მალოკი არის მიმთითებელი, რომელსაც აქვს არგუმენტი სადაც უნდა მივაწოდოთ მეხსიერების ზომა რაც ჩვენს კონკრეტულ ამოცანას სჭირდება მეხსიერების ადგილი გამოიყიფა heap-ში და როდესაც შევასრულებთ კონკრეტულ ამოცანას free(variable)-ით გავასუფთავებთ იმ ადგილს სადაც შევასრულეთ ოპერაციები.

კოდი შეიცავს ბევრ ფაილს მაგალითად ბიბლიოთეკებს და სორს კოდებს, როცა ვალაგებთ მათ ფოლდერებში მათი კომპილაცია უნდა მოხდეს შემდეგი ბრძანებით gcc -I"ბიბლიოთეკების ფოლდერის სახელი" "სორს კოდების ფოლდერის სახელი\ობიექტური ფაილი(code.o)" "სორს კოდების ფოლდერის სახელი\ობიექტური ფაილი(code1.o)" "სორს კოდების ფოლდერის სახელი\ობიექტური ფაილი(code2.o)" mainc.c -o main ასე დაკომპილირდება ვენი პროგრამა

ზემოთ ხსენებულის თავიდან ასარიდებლად რომ არ მოგვიხდეს ამდენი წერა ბრძანების შეგვიძლია დავაარქივოთ კოდი ანუ მისი ობიექტური ფაილებისგან შევქმნათ ერთი არქივ ფაილი და მისით გავიმარტივოთ საქმე, იმ დირექტორიაშI სადაც არის ობიექტური(.o) ფაილებივწერთ ბრძანებას: ar -rsc სახელირაცგვინდადავარქვათ.a code1.o code2.o code.o ანუ ის ფაილები რომლებისგანაც ვაკეთებთ საერთო ფაილს (სადაც წერია მისამართები ობიექტური ფაილების)

system da execl ბრძანება ესაა როდესაც პროგრამიდან სისტემურ ბრძანებებს ვაკეთებთ ანუ კოდში ვწერთ მაგალითად system("ping www.google.com"); 
ეს ბრძანება არის ვინდოუსის რაც სისტემის არგუმენტადაა და cmd ში გაუშვებბს ამ ბრძანებას ჩვენი პროგრამა და დაიპინგება გუგლი, execl იც მსგავს დანაშაულს ჩადის
მაგრამ განსხვავება ისაა რომ როდესაც როდესაც ამ ბრძანებით სხხვა windows  ბრძანებას ვუშვებთ cmd ში ჩვენი პროგრამა იხურება და რჩება მისი დატოვილი ბრძანების შედეგი
system ის შემთხვევაში არ იხურება ჩვენი ეს პროგრამა მაგ წინა შემთხვევაში თუ ადვპინგეთ გუგლი როდესაც მაგ ფანჯარას გავაშერებთ ჩვენი პროგრამა გააგრძელებს
მუშაობას იმ წერტილიდან სადაც system გამოძახება გვქონდა და შეგვილია ისევ რამდენიმე ბრძანება მივაძახოთ cmd ს როცა execl ით მხოლოდ ერთხელ გამოძახების
დროს ჩვენს პროგრამას ვხურავთ :)
























